{"version":3,"sources":["InputURL.tsx","NewURL.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["InputURL","props","react_default","a","createElement","Form_default","Row","Control","style","width","fontSize","size","type","placeholder","onChange","NewinputURL","onKeyPress","e","key","preventDefault","GetURL","Button_default","variant","onClick","hiddenStyle","shortenURL","display","margin","lib_default","text","onCopy","setCopiedToTrue","copied","color","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ValidURL","url","RegExp","test","asyncToGenerator","regenerator_default","mark","_callee","postData","data","wrap","_context","prev","next","inputURL","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","setState","shortURL","alert","concat","stop","_ref2","_callee2","_context2","target","value","_x","apply","arguments","_callee3","_context3","message","className","Container_default","src_InputURL","NewURL","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c686257.chunk.js","sourcesContent":["// Import necessary libraries\nimport React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst InputURL = (props: any) => {\n\n  return (\n    <form>\n      <Form.Row>\n        <Form.Control\n          style={{width: '50em', fontSize: '0.5em'}}\n          size=\"lg\"\n          type=\"text\"\n          placeholder=\"Incert URL\"\n          onChange={props.NewinputURL}\n          onKeyPress={(e: any) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              props.GetURL()\n            }\n          }}\n        />\n        <Button\n          style={{fontSize: '0.5em'}}\n          variant=\"primary\"\n          onClick={props.GetURL}>\n          Get URL\n        </Button>\n      </Form.Row>\n    </form>\n  )\n}\n// Export the component as the default object\nexport default InputURL;\n","// Import necessary libraries\nimport React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Button from 'react-bootstrap/Button'\n// Functional component for dispaying the movie names\nconst InputURL = (props: any) => {\n  let hiddenStyle = props.shortenURL === '' ? \"none\" : \"inline-block\"\n  return (\n    <form>\n      <Form.Row>\n        <p style={{display: 'inline-block', margin: '2em'}}>{props.shortenURL}</p>\n        <CopyToClipboard text={props.shortenURL}\n          onCopy={props.setCopiedToTrue}\n        >\n          <Button style={{fontSize: '0.5em', display: hiddenStyle}}>Copy to Clipboard</Button>\n        </CopyToClipboard>\n      </Form.Row>\n      <Form.Row>\n        {props.copied ? <span style={{color: 'green'}}>Copied</span> : null}\n      </Form.Row>\n    </form>\n  )\n}\n// Export the component as the default object\nexport default InputURL;\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport './App.css';\nimport InputURL from './InputURL';\nimport NewURL from './NewURL';\ntype State = {\n  inputURL: string,\n  shortenURL: string,\n  message: string,\n  copied: boolean,\n}\n// Main class for combining all the components\nclass App extends Component {\n  state: State\n  constructor(props: any){\n    super(props)\n    this.state = {\n      inputURL: '',\n      shortenURL: '',\n      message: '',\n      copied: false,\n    };\n  }\n  ValidURL = (url: string) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n      '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n    return !!pattern.test(url);\n  }\n\n  GetURL = async () => {\n\n    if(this.ValidURL(this.state.inputURL)){\n      const postData = {\"url\": this.state.inputURL};\n      let data: any = await fetch('/api/shortenurl', {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify(postData), // body data type must match \"Content-Type\" header\n      });\n      data = await data.json();\n      this.setState({shortenURL: data.shortURL, copied: false})\n    }\n    else{\n      alert(`${this.state.inputURL} is not a valid URL`)\n    }\n\n\n  }\n\n  NewinputURL = async (e: any)=>{\n    await this.setState({ inputURL: e.target.value })\n  }\n\n  setCopiedToTrue = async () => {\n    await this.setState({ copied: true })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <InputURL\n              NewinputURL={this.NewinputURL}\n              GetURL={this.GetURL}\n            />\n            <NewURL\n              shortenURL={this.state.shortenURL}\n              copied={this.state.copied}\n              setCopiedToTrue={this.setCopiedToTrue}\n            />\n          </Container>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}